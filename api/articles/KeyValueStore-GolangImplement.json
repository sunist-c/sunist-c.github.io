{"title":"使用Golang实现一个并发安全的Map","uid":"9d5491a5ddb5a138c7973036a7b8ad61","slug":"KeyValueStore-GolangImplement","date":"2022-07-20T09:16:54.000Z","updated":"2022-07-20T09:50:03.461Z","comments":true,"path":"api/articles/KeyValueStore-GolangImplement.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.opss.cn%2Fwp-content%2Fuploads%2F2020%2F03%2F202003130037042.jpg&refer=http%3A%2F%2Fwww.opss.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660637907&t=d526a07a4c3db6183eb24202caa43381","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这篇博文是<code>CeobeBot</code>的框架<code>CeobeBotFramework</code>的<code>kv</code>部分的总结</p></blockquote>\n<p>总说redis单线程性能高，最近正好在实现自拟的框架，于是产生了一个用golang实现一个高性能kv的想法，进行了一天的coding、单元测试和基准测试以后，得出的结论是：</p>\n<ul>\n<li>有锁的并发kv性能低于无锁的kv</li>\n</ul>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>先贴一下定义结构的代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> IDatabase <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> t time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> e <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> database <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tmu    sync<span class=\"token punctuation\">.</span>RWMutex\n\tbuff  <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>dbRequest\n\texit  <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tdirty <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>entity\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相信大家看到这里都已经知道了我的思路：就是用一个chanel作为kv的命令缓冲区，保证kv的并发安全性，然后使用go routine作为consumer消费这个chanel里的指令，至于那个锁<code>mu sync.RWMutex</code>呢，则是为进行并发读写的实现方式准备的</p>\n<p>整个结构图如下：</p>\n<p><img src=\"/\" alt=\"占位\"></p>\n<p>读写过程如下图：</p>\n<p><img src=\"/\" alt=\"占位\"></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>首先要说明的是项目的结构：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">.\n|-- buff.go         // 缓冲chanel相关的结构体\n|-- db.go           // kv主体实现\n|-- db_test.go      // 测试文件\n|-- entity.go       // kv实际存储内容\n`-- error.go        // 自定义错误<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"db-go\"><a href=\"#db-go\" class=\"headerlink\" title=\"db.go\"></a>db.go</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> kv\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> IDatabase <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> t time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> e <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewDatabase</span><span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">,</span> buffSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> IDatabase <span class=\"token punctuation\">&#123;</span>\n\tdb <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>database<span class=\"token punctuation\">&#123;</span>\n\t\tbuff<span class=\"token punctuation\">:</span>  <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>dbRequest<span class=\"token punctuation\">,</span> buffSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\texit<span class=\"token punctuation\">:</span>  <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdirty<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tmu<span class=\"token punctuation\">:</span>    sync<span class=\"token punctuation\">.</span>RWMutex<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">operator</span><span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> db\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> database <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tmu    sync<span class=\"token punctuation\">.</span>RWMutex\n\tbuff  <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>dbRequest\n\texit  <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tdirty <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>entity\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d database<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treq <span class=\"token operator\">:=</span> <span class=\"token function\">newDbRequest</span><span class=\"token punctuation\">(</span>getValue<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">)</span>\n\treq<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>requestFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\trequestKey<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>buff <span class=\"token operator\">&lt;-</span> req\n\n\tresp <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>req<span class=\"token punctuation\">.</span>callback\n\t<span class=\"token keyword\">switch</span> resp<span class=\"token punctuation\">.</span>responseType <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> withError<span class=\"token punctuation\">:</span>\n\t\terr <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tvalue <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseValue<span class=\"token punctuation\">]</span>\n\t\ttimeout <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseTimeout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span>\n\t\tout <span class=\"token operator\">:=</span> timeout<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d database<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> t time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> e <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treq <span class=\"token operator\">:=</span> <span class=\"token function\">newDbRequest</span><span class=\"token punctuation\">(</span>setValue<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">)</span>\n\treq<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>requestFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\trequestKey<span class=\"token punctuation\">:</span>     key<span class=\"token punctuation\">,</span>\n\t\trequestValue<span class=\"token punctuation\">:</span>   value<span class=\"token punctuation\">,</span>\n\t\trequestTimeout<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>buff <span class=\"token operator\">&lt;-</span> req\n\n\tresp <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>req<span class=\"token punctuation\">.</span>callback\n\t<span class=\"token keyword\">switch</span> resp<span class=\"token punctuation\">.</span>responseType <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> withError<span class=\"token punctuation\">:</span>\n\t\terr <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tvalue <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseValue<span class=\"token punctuation\">]</span>\n\t\ttimeout <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseTimeout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span>\n\t\tout <span class=\"token operator\">:=</span> timeout<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d database<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treq <span class=\"token operator\">:=</span> <span class=\"token function\">newDbRequest</span><span class=\"token punctuation\">(</span>deleteKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">)</span>\n\treq<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>requestFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\trequestKey<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>buff <span class=\"token operator\">&lt;-</span> req\n\n\tresp <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>req<span class=\"token punctuation\">.</span>callback\n\t<span class=\"token keyword\">switch</span> resp<span class=\"token punctuation\">.</span>responseType <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> withError<span class=\"token punctuation\">:</span>\n\t\terr <span class=\"token operator\">:=</span> resp<span class=\"token punctuation\">.</span>returns<span class=\"token punctuation\">[</span>responseError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d database<span class=\"token punctuation\">)</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treq <span class=\"token operator\">:=</span> <span class=\"token function\">newDbRequest</span><span class=\"token punctuation\">(</span>rangeDB<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">)</span>\n\treq<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>requestFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\trequestFunc<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>buff <span class=\"token operator\">&lt;-</span> req\n\n\t<span class=\"token operator\">&lt;-</span>req<span class=\"token punctuation\">.</span>callback\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>database<span class=\"token punctuation\">)</span> <span class=\"token function\">operator</span><span class=\"token punctuation\">(</span>workers <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> workers <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> request <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>d<span class=\"token punctuation\">.</span>buff<span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">switch</span> request<span class=\"token punctuation\">.</span>requestType <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> getValue<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\tkey <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestKey<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withError<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseError<span class=\"token punctuation\">:</span> notFoundError<span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">.</span><span class=\"token function\">Before</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withError<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\tresponseError<span class=\"token punctuation\">:</span> notFoundError<span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\tresponseValue<span class=\"token punctuation\">:</span>   entity<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\tresponseTimeout<span class=\"token punctuation\">:</span> entity<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> setValue<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\tkey <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestKey<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\tvalue <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestValue<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\ttimeout <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestTimeout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\tentity <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>entity<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\ttimeout<span class=\"token punctuation\">:</span> timeout<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tdata<span class=\"token punctuation\">:</span>    value<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tmu<span class=\"token punctuation\">:</span>      sync<span class=\"token punctuation\">.</span>RWMutex<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\td<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entity\n\n\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tresponseValue<span class=\"token punctuation\">:</span>   entity<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tresponseTimeout<span class=\"token punctuation\">:</span> entity<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t<span class=\"token keyword\">case</span> deleteKey<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\tkey <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestKey<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> rangeDB<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\tfunction <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestFunc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> e <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> d<span class=\"token punctuation\">.</span>dirty <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t<span class=\"token function\">function</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>d<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\texitChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> workers<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workers<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">*</span>database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> request <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>d<span class=\"token punctuation\">.</span>buff<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t<span class=\"token keyword\">switch</span> request<span class=\"token punctuation\">.</span>requestType <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">case</span> getValue<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\tkey <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestKey<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withError<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\tresponseError<span class=\"token punctuation\">:</span> notFoundError<span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tentity<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">.</span><span class=\"token function\">Before</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withError<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\t\tresponseError<span class=\"token punctuation\">:</span> notFoundError<span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\t\t\tresponseValue<span class=\"token punctuation\">:</span>   entity<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\tresponseTimeout<span class=\"token punctuation\">:</span> entity<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\tentity<span class=\"token punctuation\">.</span><span class=\"token function\">readDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">case</span> setValue<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\tkey <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestKey<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t\tvalue <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestValue<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t\ttimeout <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestTimeout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\tentity <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>entity<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\ttimeout<span class=\"token punctuation\">:</span> timeout<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tdata<span class=\"token punctuation\">:</span>    value<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\tmu<span class=\"token punctuation\">:</span>      sync<span class=\"token punctuation\">.</span>RWMutex<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\tentity<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entity\n\n\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseValue<span class=\"token punctuation\">:</span>   entity<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\tresponseTimeout<span class=\"token punctuation\">:</span> entity<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\tentity<span class=\"token punctuation\">.</span><span class=\"token function\">writeDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">case</span> deleteKey<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\tkey <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestKey<span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> e<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">case</span> rangeDB<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\tfunction <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>requestFunc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> e <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> d<span class=\"token punctuation\">.</span>dirty <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\t<span class=\"token function\">function</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">writeDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\tcallback <span class=\"token operator\">:=</span> dbResponse<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t\tresponseType<span class=\"token punctuation\">:</span> withValue<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\treturns<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\trequest<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">&lt;-</span> callback\n\t\t\t\t\t\t\td<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>exitChan<span class=\"token punctuation\">:</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>exitChan<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">*</span>database<span class=\"token punctuation\">,</span> w <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>d<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\te <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>exitChan<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> workers<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d database<span class=\"token punctuation\">)</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td<span class=\"token punctuation\">.</span>exit <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"entity-go\"><a href=\"#entity-go\" class=\"headerlink\" title=\"entity.go\"></a>entity.go</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> kv\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> entity <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tmu      sync<span class=\"token punctuation\">.</span>RWMutex\n\ttimeout time<span class=\"token punctuation\">.</span>Time\n\tdata    <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>entity<span class=\"token punctuation\">)</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\te<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>entity<span class=\"token punctuation\">)</span> <span class=\"token function\">writeDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\te<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>entity<span class=\"token punctuation\">)</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\te<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>entity<span class=\"token punctuation\">)</span> <span class=\"token function\">readDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\te<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"buff-go\"><a href=\"#buff-go\" class=\"headerlink\" title=\"buff.go\"></a>buff.go</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> kv\n\n<span class=\"token keyword\">type</span> typeRequest <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tgetValue typeRequest <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\tsetValue\n\tdeleteKey\n\trangeDB\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> typeResponse <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\twithError typeResponse <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\twithValue\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> requestFields <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\trequestKey requestFields <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\trequestValue\n\trequestTimeout\n\trequestFunc\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> responseFields <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tresponseKey responseFields <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\tresponseValue\n\tresponseTimeout\n\tresponseError\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> dbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\trequestType typeRequest\n\targs        <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>requestFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tcallback    <span class=\"token keyword\">chan</span> dbResponse\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> dbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tresponseType typeResponse\n\treturns      <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>responseFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newDbRequest</span><span class=\"token punctuation\">(</span>rType typeRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>dbRequest <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>dbRequest<span class=\"token punctuation\">&#123;</span>\n\t\trequestType<span class=\"token punctuation\">:</span> rType<span class=\"token punctuation\">,</span>\n\t\targs<span class=\"token punctuation\">:</span>        <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>requestFields<span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tcallback<span class=\"token punctuation\">:</span>    <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> dbResponse<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"error-go\"><a href=\"#error-go\" class=\"headerlink\" title=\"error.go\"></a>error.go</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> kv\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> outOfRangeError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tupperIndex <span class=\"token builtin\">int</span>\n\tlowerIndex <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>o outOfRangeError<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kv-db out of range with [%v:%v]\"</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>lowerIndex<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>upperIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> notFoundError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tkey <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n notFoundError<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kv-db cannot find key: %#v\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><h2 id=\"测试文件\"><a href=\"#测试文件\" class=\"headerlink\" title=\"测试文件\"></a>测试文件</h2><p>下面的各种情况的测试均在本文件的基础下进行，区别是改了部分参数，单次operation均为十万次读&#x2F;写</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> kv\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"testing\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tdb <span class=\"token operator\">=</span> <span class=\"token function\">NewDatabase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkTest</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">33333</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">33333</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">33333</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"纯读取测试\"><a href=\"#纯读取测试\" class=\"headerlink\" title=\"纯读取测试\"></a>纯读取测试</h2><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">goos: darwin\ngoarch: arm64\npkg: github.com/sunist-c/CeobeBotFramework/infrastructure/kv\nBenchmarkTest\nBenchmarkTest-8   \t      13\t  85523782 ns/op\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"纯写入测试\"><a href=\"#纯写入测试\" class=\"headerlink\" title=\"纯写入测试\"></a>纯写入测试</h2><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">goos: darwin\ngoarch: arm64\npkg: github.com/sunist-c/CeobeBotFramework/infrastructure/kv\nBenchmarkTest\nBenchmarkTest-8   \t       8\t 148629094 ns/op\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"读写混合测试\"><a href=\"#读写混合测试\" class=\"headerlink\" title=\"读写混合测试\"></a>读写混合测试</h2><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">goos: darwin\ngoarch: arm64\npkg: github.com/sunist-c/CeobeBotFramework/infrastructure/kv\nBenchmarkTest\nBenchmarkTest-8   \t      12\t 105071628 ns/op\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"多go程纯读取测试\"><a href=\"#多go程纯读取测试\" class=\"headerlink\" title=\"多go程纯读取测试\"></a>多go程纯读取测试</h2><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">goos: darwin\ngoarch: arm64\npkg: github.com/sunist-c/CeobeBotFramework/infrastructure/kv\nBenchmarkTest\nBenchmarkTest-8   \t      13\t  85009984 ns/op\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"多go程纯写入测试\"><a href=\"#多go程纯写入测试\" class=\"headerlink\" title=\"多go程纯写入测试\"></a>多go程纯写入测试</h2><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">goos: darwin\ngoarch: arm64\npkg: github.com/sunist-c/CeobeBotFramework/infrastructure/kv\nBenchmarkTest\nBenchmarkTest-8   \t       8\t 150155224 ns/op\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"多go程读写混合测试\"><a href=\"#多go程读写混合测试\" class=\"headerlink\" title=\"多go程读写混合测试\"></a>多go程读写混合测试</h2><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">goos: darwin\ngoarch: arm64\npkg: github.com/sunist-c/CeobeBotFramework/infrastructure/kv\nBenchmarkTest\nBenchmarkTest-8   \t      12\t 106118806 ns/op\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在基准测试中，由于测试是顺序进行的，没有进行并发处理，我们后面加上了并发的测试：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">项目</th>\n<th align=\"center\">耗时</th>\n<th align=\"center\">测试量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">单go程均衡测试</td>\n<td align=\"center\">647.506166ms</td>\n<td align=\"center\">100go程，每go程万次读&#x2F;写</td>\n</tr>\n<tr>\n<td align=\"center\">多go程均衡测试</td>\n<td align=\"center\">784.627083ms</td>\n<td align=\"center\">100go程，每go程万次读&#x2F;写</td>\n</tr>\n<tr>\n<td align=\"center\">单go程均衡测试</td>\n<td align=\"center\">8.808718542s</td>\n<td align=\"center\">1000go程，每go程万次读&#x2F;写</td>\n</tr>\n<tr>\n<td align=\"center\">多go程均衡测试</td>\n<td align=\"center\">11.675095125s</td>\n<td align=\"center\">1000go程，每go程万次读&#x2F;写</td>\n</tr>\n</tbody></table>\n<p>可见，随着go程的增多，单go程的方式就越来越快</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本来做多go程worker的时候，是没有给dirty加锁的，后面报了panic，查阅了资料以后发现，map不是并发安全的地方表现就表现在，它不能并发地进行读写，原来还以为只是简单脏数据的问题…所以后面无奈加上了锁</p>\n<p>至于真·多go程实现，就需要等下次有空<del>摸鱼</del>的时候抛弃内建map进行一个重构了</p>\n","text":" 这篇博文是CeobeBot的框架CeobeBotFramework的kv部分的总结 总说redis单线程性能高，最近正好在实现自拟的框架，于是产生了一个用golang实现一个高性能kv的想法，进行了一天的coding、单元测试和基准测试以后，得出的结论是： 有锁的并发kv性能低...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"blog","slug":"blog","count":10,"path":"api/categories/blog.json"}],"tags":[{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"},{"name":"KeyValue","slug":"KeyValue","count":1,"path":"api/tags/KeyValue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#db-go\"><span class=\"toc-text\">db.go</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#entity-go\"><span class=\"toc-text\">entity.go</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#buff-go\"><span class=\"toc-text\">buff.go</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#error-go\"><span class=\"toc-text\">error.go</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">测试文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%AF%E8%AF%BB%E5%8F%96%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">纯读取测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%AF%E5%86%99%E5%85%A5%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">纯写入测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%86%99%E6%B7%B7%E5%90%88%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">读写混合测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9Ago%E7%A8%8B%E7%BA%AF%E8%AF%BB%E5%8F%96%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">多go程纯读取测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9Ago%E7%A8%8B%E7%BA%AF%E5%86%99%E5%85%A5%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">多go程纯写入测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9Ago%E7%A8%8B%E8%AF%BB%E5%86%99%E6%B7%B7%E5%90%88%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">多go程读写混合测试</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲","slug":"blog-author","avatar":"/assets/img/favicon.png","link":"/","description":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲 is a pigeon from SouthWest University","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/assets/svg/bilibili.svg","link":"https://space.bilibili.com/25394898"},"live":{"icon":"/assets/svg/live.svg","link":"https://live.bilibili.com/5184681"},"github":{"icon":"/assets/svg/github.svg","link":"https://github.com/sunist-c"},"institution":{"icon":"/assets/svg/institution.svg","link":"https://github.com/swu-acm-lab"},"outlook":{"icon":"/assets/svg/outlook.svg","link":"mailto:sunist@mail.swu-acm.cn"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"浅试golang泛型","uid":"e234e9c36130a19f52c8637c43f3ee43","slug":"Try-GolangGenerics","date":"2022-07-18T06:44:39.000Z","updated":"2022-07-18T07:10:33.037Z","comments":true,"path":"api/articles/Try-GolangGenerics.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.opss.cn%2Fwp-content%2Fuploads%2F2020%2F03%2F202003130037042.jpg&refer=http%3A%2F%2Fwww.opss.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660637907&t=d526a07a4c3db6183eb24202caa43381","text":"Golang 1.18正式支持了泛型，当时就想试一试，无奈Goland当时的版本不支持，最近才意识到2022年的Goland已经开始支持Golang的泛型了，遂进行一下小尝试，顺便做一下记录 Env 操作系统: macOS Monterey Version12.4 IDE: Go...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"blog","slug":"blog","count":10,"path":"api/categories/blog.json"}],"tags":[{"name":"Golang","slug":"Golang","count":8,"path":"api/tags/Golang.json"},{"name":"OOP","slug":"OOP","count":1,"path":"api/tags/OOP.json"},{"name":"Generics","slug":"Generics","count":1,"path":"api/tags/Generics.json"}],"author":{"name":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲","slug":"blog-author","avatar":"/assets/img/favicon.png","link":"/","description":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲 is a pigeon from SouthWest University","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/assets/svg/bilibili.svg","link":"https://space.bilibili.com/25394898"},"live":{"icon":"/assets/svg/live.svg","link":"https://live.bilibili.com/5184681"},"github":{"icon":"/assets/svg/github.svg","link":"https://github.com/sunist-c"},"institution":{"icon":"/assets/svg/institution.svg","link":"https://github.com/swu-acm-lab"},"outlook":{"icon":"/assets/svg/outlook.svg","link":"mailto:sunist@mail.swu-acm.cn"}}}}}}