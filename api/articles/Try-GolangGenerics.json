{"title":"浅试golang泛型","uid":"e234e9c36130a19f52c8637c43f3ee43","slug":"Try-GolangGenerics","date":"2022-07-18T06:44:39.000Z","updated":"2022-07-18T07:10:33.037Z","comments":true,"path":"api/articles/Try-GolangGenerics.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.opss.cn%2Fwp-content%2Fuploads%2F2020%2F03%2F202003130037042.jpg&refer=http%3A%2F%2Fwww.opss.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660637907&t=d526a07a4c3db6183eb24202caa43381","content":"<p>Golang 1.18正式支持了泛型，当时就想试一试，无奈Goland当时的版本不支持，最近才意识到2022年的Goland已经开始支持Golang的泛型了，遂进行一下小尝试，顺便做一下记录</p>\n<h1 id=\"Env\"><a href=\"#Env\" class=\"headerlink\" title=\"Env\"></a>Env</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>操作系统: macOS Monterey Version12.4</p>\n<p>IDE: Goland 2021.3.4</p>\n<p>GoEnv: go 1.18.4 arm64</p></blockquote>\n<h1 id=\"泛型使用\"><a href=\"#泛型使用\" class=\"headerlink\" title=\"泛型使用\"></a>泛型使用</h1><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>Golang的泛型声明方法和Java&#x2F;C++相差不大，其语法如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> sort<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>array <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">,</span> cmp <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...implements</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> IList<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...methods</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> List<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...fields</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h2><p>下面的代码是简单实现的排序方法，<del>懒就写了个简单的冒泡</del>：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> sort<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>arr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">,</span> cmp <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sorting array: %#v\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\n\tsorted <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>sorted<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsorted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\tsorted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">>=</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tarr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sorted array: %#v\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果如下：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">sorting array: []int&#123;1, 4, 5, 3, 2&#125;\nsorted array: []int&#123;1, 2, 3, 4, 5&#125;\n\nProcess finished with the exit code 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>虽然<code>interface&#123;&#125;</code>和<code>struct&#123;&#125;</code>可以被<code>[T any]</code>修饰，但是将<code>[T any]</code>修饰结构体的方法时，Goland则会报错：</p>\n<pre><code>Method cannot have type parameters\n</code></pre>\n<p>并且用结构体实现带<code>[T any]</code>修饰的接口时，Goland自动生成实现时，会修改方法的参数类型，将<code>T</code>修改为<code>interface&#123;&#125;</code>：</p>\n<p>定义的接口：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> IList<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>自动生成的实现：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l List<span class=\"token punctuation\">)</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> t <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//TODO implement me</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implement me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>我也只是个刚入门go的小蒟蒻，总结可能不到位，民那桑看看就好</p>\n<ol>\n<li>第一眼看居然和<code>template&lt;class T&gt;</code>差不多，本来以为能够突破go针对不同类型代码复用状况，实际使用下来也只能在函数上下下功夫，基本等于静态方法的泛型</li>\n<li>本以为可以突破C&#x2F;C++运行时泛型的局限，因为go的泛型是在编译前就会提示错误的，但是结果go的泛型并不能挂在结构体也就是对象上使用，总体来说没有Java&#x2F;C#一类的强OOP语言舒服</li>\n<li>期待大佬们能够在go泛型的基础上封一些容器出来了，<del>到时候就不用手写基础结构体了</del>，直接调包……</li>\n</ol>\n","text":"Golang 1.18正式支持了泛型，当时就想试一试，无奈Goland当时的版本不支持，最近才意识到2022年的Goland已经开始支持Golang的泛型了，遂进行一下小尝试，顺便做一下记录 Env 操作系统: macOS Monterey Version12.4 IDE: Go...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"blog","slug":"blog","count":9,"path":"api/categories/blog.json"}],"tags":[{"name":"Golang","slug":"Golang","count":7,"path":"api/tags/Golang.json"},{"name":"OOP","slug":"OOP","count":1,"path":"api/tags/OOP.json"},{"name":"Generics","slug":"Generics","count":1,"path":"api/tags/Generics.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Env\"><span class=\"toc-text\">Env</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">泛型使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">完整示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲","slug":"blog-author","avatar":"/assets/img/favicon.png","link":"/","description":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲 is a pigeon from SouthWest University","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/assets/svg/bilibili.svg","link":"https://space.bilibili.com/25394898"},"live":{"icon":"/assets/svg/live.svg","link":"https://live.bilibili.com/5184681"},"github":{"icon":"/assets/svg/github.svg","link":"https://github.com/sunist-c"},"institution":{"icon":"/assets/svg/institution.svg","link":"https://github.com/swu-acm-lab"},"outlook":{"icon":"/assets/svg/outlook.svg","link":"mailto:sunist@mail.swu-acm.cn"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"ProjectAnalysis - 设计文档","uid":"a3fb736aa42338fc8e8d5d10993cc4eb","slug":"ProjectAnalysisDesignDocument","date":"2022-06-26T16:00:00.000Z","updated":"2022-06-27T07:48:52.849Z","comments":true,"path":"api/articles/ProjectAnalysisDesignDocument.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/06/27/8296f0d2497c9a00.png","text":" 本blog是 SunistC 在学年设计期间，为了卷一个项目和小组同学一起拿高分，计划开发的基于大数据的分布式微服务系统，用于可视化展示全球的疫情状况，本文是设计阶段的记录，本文所对应的仓库为 ProjectAnalysis ，采用 MIT 协议 1. 架构1.1 Overvi...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"blog","slug":"blog","count":9,"path":"api/categories/blog.json"}],"tags":[{"name":"Backend","slug":"Backend","count":6,"path":"api/tags/Backend.json"},{"name":"Golang","slug":"Golang","count":7,"path":"api/tags/Golang.json"},{"name":"Big Data","slug":"Big-Data","count":1,"path":"api/tags/Big-Data.json"},{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"author":{"name":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲","slug":"blog-author","avatar":"/assets/img/favicon.png","link":"/","description":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲 is a pigeon from SouthWest University","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/assets/svg/bilibili.svg","link":"https://space.bilibili.com/25394898"},"live":{"icon":"/assets/svg/live.svg","link":"https://live.bilibili.com/5184681"},"github":{"icon":"/assets/svg/github.svg","link":"https://github.com/sunist-c"},"institution":{"icon":"/assets/svg/institution.svg","link":"https://github.com/swu-acm-lab"},"outlook":{"icon":"/assets/svg/outlook.svg","link":"mailto:sunist@mail.swu-acm.cn"}}}}}}