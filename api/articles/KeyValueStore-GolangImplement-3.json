{"title":"(分段分表锁)使用Golang实现一个并发安全的Map","uid":"20a7da5a5694f08bc83b1c325a79dd48","slug":"KeyValueStore-GolangImplement-3","date":"2022-08-15T01:53:46.000Z","updated":"2022-08-15T07:55:09.696Z","comments":true,"path":"api/articles/KeyValueStore-GolangImplement-3.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.opss.cn%2Fwp-content%2Fuploads%2F2020%2F03%2F202003130037042.jpg&refer=http%3A%2F%2Fwww.opss.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660637907&t=d526a07a4c3db6183eb24202caa43381","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上回说到，用Golang实现了一个高性能的kv，并且优化了锁的操作，今天我们就使用分段分表锁的思路，来将我们的Map性能提升到一个新的高度，相关视频教程在全文的最后，可以点击目录中的锚点快速前往</p></blockquote>\n<p>本blog的对应GitHub仓库为: <a href=\"https://github.com/sunist-c/toy-framework\">sunist-c/toy-framework</a>，将作为<code>toy-framework</code>的组件存在，可能随<code>toy-framework</code>一同更新</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><h2 id=\"问题产生\"><a href=\"#问题产生\" class=\"headerlink\" title=\"问题产生\"></a>问题产生</h2><p>go内置的map是并发不安全的，比如在下面的函数中：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            key<span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> index<span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n            v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v-%v\\n\"</span><span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">,</span> v <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们启用了100个go程，并发地向<code>m := map[int]int</code>写入数据，甚至没有对同一个<code>key</code>值进行操作，但是在实际执行的过程中，这个函数会报下面的panic：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">fatal error: concurrent map writes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>造成这个问题的原因是，go内置的map的存储底层结构是bucket，默认情况下，每个bucket可以存储八个<code>Key-Value pair</code>，但是当bucket已经存储满八个KV对以后，便会触发map的扩容机制(此机制不在此处展开)，扩容中的map是无法进行操作的，若一个goroutine对map进行写操作并且触发扩容机制时，此时其他goroutine继续操作这个map的话，便会报出上面所述的<code>concurrent map writes</code></p>\n<h2 id=\"简单改进\"><a href=\"#简单改进\" class=\"headerlink\" title=\"简单改进\"></a>简单改进</h2><p>解决上面这一问题最简单的方法便是对map加一个锁，同一时间只允许一个goroutine对map进行操作，其余goroutine都需要等待正在进行操作的goroutine完成操作释放锁后，再进行竞争并获取锁</p>\n<p>于是我们的map便成为了下面的样子：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> AnotherMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    mu <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>Mutex\n    mp <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上面这段代码采用了<code>go 1.18</code>及以上版本的泛型(Generics)语法，实际采用时请注意go语言版本</p></blockquote>\n<p>我们在对<code>AnotherMap</code>进行操作前，对应的函数都需要将<code>mu</code>进行<code>Lock()</code>操作，操作完成后进行<code>UnLock()</code>操作，以此来保证同一时间只能有一个goroutine能够对<code>mp</code>进行操作</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">互斥锁的特征</p>\n<p>互斥锁(Mutex)具有以下特征：</p>\n<ol>\n<li>锁有且仅有<code>Locked</code>和<code>Unlocked</code>两个状态</li>\n<li>当锁处于<code>Locked</code>状态时，其他goroutines都不能申请锁</li>\n<li>当锁处于<code>Unlocked</code>状态时，其他goroutines才可以申请锁</li>\n</ol>\n<p>即同一时间最多只能有一个goroutine可以对锁进行占用</p>\n</div>\n<p>这个改进的实现代码如下：</p>\n<details class=\"custom-details\">\n<summary>点击展开以显示代码</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> toy_kv\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> CommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmu <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>Mutex\n\tm  <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value Value<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgot<span class=\"token punctuation\">,</span> gotten <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">return</span> got<span class=\"token punctuation\">,</span> gotten\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>m <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> NewCommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> IMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>CommonMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\tmu<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>Mutex<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tm<span class=\"token punctuation\">:</span>  <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<p>但是，由于我们使用了<code>互斥锁</code>，导致了并发请求在实际处理的时候，其实是串行处理，而不是并行处理的，导致了我们的map并行性能和串行性能其实是没有差别的，进而产生相关的性能问题</p>\n<h2 id=\"进一步改进\"><a href=\"#进一步改进\" class=\"headerlink\" title=\"进一步改进\"></a>进一步改进</h2><p>但当我们仔细审视上面那个简单粗暴的，使用互斥锁的改进后，我们不难发现一个问题：</p>\n<p>当map没有进行写操作(即可能造成扩容、缩桶情况)的时候，此时map时可以进行并发读的，并且无论多少个goroutine进行并发读取，map都是安全的</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">读写锁的特征</p>\n<p>读写锁(RWMutex)具有下面的特征：</p>\n<ol>\n<li>锁分为<code>ReadLock(读锁)</code>和<code>WriteLock(写锁)</code></li>\n<li>当锁的类型为<code>ReadLock</code>的时候，不可以申请<code>WriteLock</code>，反之亦然</li>\n<li>当锁的类型为<code>ReadLock</code>的时候，其他goroutines可以继续申请<code>ReadLock</code></li>\n<li>当锁的类型为<code>WriteLock</code>的时候，其他goroutines不可以继续申请<code>WriteLock</code></li>\n</ol>\n</p>\n</div>\n<p>读写锁的特征与我们map的情况相当一致，所以我们就可以使用<code>读写锁</code>来对map进行并发控制，在进行读操作的时候，我们申请读锁，在进行写操作的时候，我们申请写锁，由此来最大限度地保证<strong>单个</strong>map被最大程度地使用</p>\n<p>那么现在我们的map便变成了下面的结构：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> AnotherMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmu <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n\tmp <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个改进的实现代码如下：</p>\n<details class=\"custom-details\">\n<summary>点击展开以显示代码</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> toy_kv\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"sync\"</span>\n\n<span class=\"token keyword\">type</span> SimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmu <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n\tmp <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>SimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value Value<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgot<span class=\"token punctuation\">,</span> gotten <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>mp<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">return</span> got<span class=\"token punctuation\">,</span> gotten\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>SimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tm<span class=\"token punctuation\">.</span>mp<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>SimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>mp<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>SimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m<span class=\"token punctuation\">.</span>mp <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> NewSimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> IMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>SimpleMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\tmu<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>RWMutex<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tmp<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h2 id=\"更进一步改进\"><a href=\"#更进一步改进\" class=\"headerlink\" title=\"更进一步改进\"></a>更进一步改进</h2><p>在上面的「进一步改进」中，我们不难发现，其实我们的map在读的时候是并行操作的，但是在写的时候是串行操作的，并且同一时刻只能进行读或者写中的一种操作，无法同时进行读和写。那有没有一种可能，我们可以让我们的map同时进行读和写，并且读和写都是并行操作呢</p>\n<p>答案是肯定的，我们可以使用分表的思路：将我们的大map分为多份小map，这样，当其中一个map在进行写操作时，其余map依旧可以进行写操作，达到了支持并发读与并发写的效果。并且，当我们的分表足够多，且元素细分足够均匀的情况下，对其中一个分表的<code>Lock</code>操作造成的影响于整个大map而言，就可以忽略不计了</p>\n<p>由此，我们的map就变成了这个样子：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmu <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n\tmp <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> AnotherMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ttables <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们对map进行操作时，步骤也更改为如下：</p>\n<ol>\n<li>对Key进行hash，确定其要存入哪张分表</li>\n<li>由分表具体进行操作</li>\n</ol>\n<p>这一部分的实现就请转到「实现」小节</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">更更更进一步改进</p>\n<p>不难发现，其实造成map并发不安全的原因，就是map的扩容、缩桶机制，如果一个Key存在的话，我们对它进行重新赋值，虽然这个操作是写操作，但不会造成map的panic，所以我们可以进一步细分map的操作：</p>\n<ol>\n<li>新增KV</li>\n<li>修改KV</li>\n<li>删除存在的KV</li>\n<li>删除不存在的KV</li>\n<li>读取KV</li>\n</ol>\n<p>上面的所有「原子」操作中，只有(1)，(3)需要申请写锁，其余的操作均不需要申请写锁，照此思路进行继续改进，则map的性能也会进一步提高</p>\n</div>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>首先我们需要给出Map的接口：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> IMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load 从kv中读取一个Key,获取它的Value以及是否存在</span>\n\t<span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value Value<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Store 向kv中存储一个Key-Value</span>\n\t<span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Delete 在kv中删除一个Key-Value</span>\n\t<span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Range 遍历kv-map,对每一个Key-Value,均调用f,当f返回false的时候,停止遍历</span>\n\t<span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Hash函数设计\"><a href=\"#Hash函数设计\" class=\"headerlink\" title=\"Hash函数设计\"></a>Hash函数设计</h2><p>Hash函数的设计是我们分段分表锁实现Map的重中之重，因为一个好的Hash函数可以Key均匀地分布在分表中，同时也要兼顾运算速度，不能像MD5那样进行过于复杂的计算，造成时间上的浪费</p>\n<p>我们此处使用的Hash算法为<code>SDBM Hash</code>，由<code>Ken Thompson</code>(C语言/Unix与Golang的设计者)发明，这个Hash的主要内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sdbmHash</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> hash <span class=\"token builtin\">uint</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span>\n\t\thash <span class=\"token operator\">=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> hash\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> hash\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个hash的时间复杂度为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1752,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>，即与<code>data</code>的长度有关</p>\n<p>那么转回本文，摆在我们面前的第一个问题是，如何在不知道Key类型的情况下(不使用reflect确定类型的原因是，reflect的性能较差)，获取Key中存储的数据</p>\n<p>我们采用的方案是<code>unsafe.Pointer</code>和<code>uintptr</code></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">unsafe.Pointer和uintptr的特征</p>\n<p>unsafe.Pointer具有如下特征:</p>\n<ol>\n<li>任意类型的指针都可以转化为unsafe.Pointer</li>\n<li>unsafe.Pointer可以转化为任意类型的指针，并且忽略类型检查(即不会报错)</li>\n</ol>\n<p>uintptr具有如下特征:</p>\n<ol>\n<li><strong>uintptr不是指针</strong></li>\n<li>unsafe.Pointer可以转化为uintptr，uintptr也可以转化为unsafe.Pointer</li>\n<li>uintptr可以进行指针运算，即C语言的<code>int *ptr = &amp;num; ptr++</code>一类的操作</li>\n<li>使用unsafe.SizeOf(x)可以获得x类型的长度，结果为uintptr</li>\n<li>x的uintptr合法取值范围为: [uintptr(unsafe.Pointer(&amp;x)), uintptr(unsafe.Pointer(&amp;x))+unsafe.SizeOf(x)]</li>\n</ol>\n</p>\n</div>\n<p>使用<code>unsafe</code>包时，需要格外注意操作逻辑，下面是使用<code>unsafe</code>包的示例代码:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">unsafeExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">:=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// ...fields</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// ...values</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// uintptr不是指针，需要防止x被gc释放，所以手动创建一指针指向x</span>\n\tgc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>x\n\n\t<span class=\"token comment\">// 获取x相关的unsafe属性</span>\n\tstartPtr <span class=\"token operator\">:=</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\toffset <span class=\"token operator\">:=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\tendPtr <span class=\"token operator\">:=</span> startPtr <span class=\"token operator\">+</span> offset\n\n\t<span class=\"token comment\">// 进行相关操作</span>\n\t<span class=\"token keyword\">for</span> ptr <span class=\"token operator\">:=</span> startPtr<span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">&lt;=</span> endPtr<span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// y := *(*WantType)(unsafe.Pointer(ptr))</span>\n\t\t<span class=\"token comment\">// ...operations</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">安全性警告</p>\n<p>需要注意的是，在实际开发的过程中，使用<code>unsafe.Pointer</code>和<code>uintptr</code>时要对自己的逻辑格外的明确，任何一点错误都可能造成严重的后果，<del>正如包名<code>unsafe</code>所示</del></p>\n<p>下面是一个错误使用的范例<del>(不要问我怎么知道的)</del>:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">errorExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 声明一个变量x，类型为int32，长度为4byte</span>\n\tx <span class=\"token operator\">:=</span> <span class=\"token function\">int32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\">// 将int类型的x转换为unsafe.Pointer</span>\n\tunsafePtr <span class=\"token operator\">:=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 将unsafePtr强制转换为*[]byte类型的指针，并将指针解引用，赋值给bytesArr</span>\n\tbytesArr <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafePtr<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 打印bytesArr的长度</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"length of bytesArr: %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bytesArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们运行上面的代码的时候，go会给我们一个惊喜，<code>x</code>的长度应该是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.131ex\" height=\"1.532ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -677 500 677\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></svg></mjx-container>，而结果却是如下所示:</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">=== RUN   errorExample\nlength of bytesArr: 1374389829464\n--- PASS: errorExample (0.00s)\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果此时对bytesArr进行操作…</p>\n</div>\n<p>所以，我们将直接获取<code>Key</code>的数据，并将其转化为<code>[]byte</code>，然后再通过<code>sdmbHash()</code>取得<code>Key</code>的hash值：</p>\n<details class=\"custom-details\">\n<summary>点击展开以显示代码</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> hash<span class=\"token punctuation\">[</span>Key any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint</span> <span class=\"token punctuation\">{</span>\n\tgc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>key\n\tstart <span class=\"token operator\">:=</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\toffset <span class=\"token operator\">:=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tsizeOfByte <span class=\"token operator\">:=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\thashSum <span class=\"token operator\">:=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> ptr <span class=\"token operator\">:=</span> start<span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">&lt;</span> start<span class=\"token operator\">+</span>offset<span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">+=</span> sizeOfByte <span class=\"token punctuation\">{</span>\n\t\tb <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\thashSum <span class=\"token operator\">+=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t\thashSum <span class=\"token operator\">=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hashSum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hashSum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> hashSum\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> hashSum\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h2 id=\"总表实现\"><a href=\"#总表实现\" class=\"headerlink\" title=\"总表实现\"></a>总表实现</h2><p>我们将总表定义如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ttables <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span>\n\tlength <span class=\"token builtin\">uint</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>tables</code>是分表的结构，<code>length</code>则为分表的数目</p>\n<p>我们只需要将所有传入请求的<code>Key</code>进行hash，然后再将请求转到对应的分表进行操作，并返回分表操作的结果即可</p>\n<details class=\"custom-details\">\n<summary>点击展开以显示代码</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ttables <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span>\n\tlength <span class=\"token builtin\">uint</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>R <span class=\"token operator\">*</span>RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value Value<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tindex <span class=\"token operator\">:=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> R<span class=\"token punctuation\">.</span>length\n\t<span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span>tables<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>R <span class=\"token operator\">*</span>RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tindex <span class=\"token operator\">:=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> R<span class=\"token punctuation\">.</span>length\n\tR<span class=\"token punctuation\">.</span>tables<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>R <span class=\"token operator\">*</span>RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tindex <span class=\"token operator\">:=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> R<span class=\"token punctuation\">.</span>length\n\tR<span class=\"token punctuation\">.</span>tables<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>R <span class=\"token operator\">*</span>RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> R<span class=\"token punctuation\">.</span>tables <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">tRange</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h2 id=\"分表实现\"><a href=\"#分表实现\" class=\"headerlink\" title=\"分表实现\"></a>分表实现</h2><p>我们将分表定义如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmu    <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n\tlines <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分表的实现与上文的<code>SimpleMap</code>类似，同样通过<code>RWMutex</code>进行并发控制</p>\n<details class=\"custom-details\">\n<summary>点击展开以显示代码</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmu    <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n\tlines <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">,</span> value Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value Value<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgot<span class=\"token punctuation\">,</span> gotten <span class=\"token operator\">:=</span> t<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">return</span> got<span class=\"token punctuation\">,</span> gotten\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>key Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">tRange</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> t<span class=\"token punctuation\">.</span>lines <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> NewRWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>length <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> IMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\trwMap <span class=\"token operator\">:=</span> RWMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\ttables<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tlength<span class=\"token punctuation\">:</span> length<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\trwMap<span class=\"token punctuation\">.</span>tables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Table<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\t\tmu<span class=\"token punctuation\">:</span>    <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>RWMutex<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\tlines<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span>Value<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>rwMap\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>上文中简单改进的实现类为<code>CommonMap</code>，进一步改进的实现类型为<code>SimpleMap</code>，更进一步改进的实现类型为<code>RWMap</code></p>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><h3 id=\"单元测试函数\"><a href=\"#单元测试函数\" class=\"headerlink\" title=\"单元测试函数\"></a>单元测试函数</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> TestCase<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tIndexes        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tStoreKeys      <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>Key\n\tStoreValues    <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>Value\n\tLoadKeys       <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>Key\n\tWantLoadValues <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>Value\n\tWantLoaded     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\n\tDeleteKeys     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>Key\n\tRangeFunc      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\tEquals         <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2 Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> UnitTestFunc<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>m IMap<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> testCase <span class=\"token operator\">*</span>TestCase<span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> testCase<span class=\"token punctuation\">.</span>Indexes <span class=\"token punctuation\">{</span>\n\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>testCase<span class=\"token punctuation\">.</span>StoreKeys<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> testCase<span class=\"token punctuation\">.</span>StoreValues<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> testCase<span class=\"token punctuation\">.</span>Indexes <span class=\"token punctuation\">{</span>\n\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>testCase<span class=\"token punctuation\">.</span>DeleteKeys<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> testCase<span class=\"token punctuation\">.</span>Indexes <span class=\"token punctuation\">{</span>\n\t\tgot<span class=\"token punctuation\">,</span> gotten <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>testCase<span class=\"token punctuation\">.</span>LoadKeys<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> gotten <span class=\"token operator\">!=</span> testCase<span class=\"token punctuation\">.</span>WantLoaded<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key %v want loaded: %v, but load: %v\"</span><span class=\"token punctuation\">,</span> testCase<span class=\"token punctuation\">.</span>LoadKeys<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> testCase<span class=\"token punctuation\">.</span>WantLoaded<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> gotten<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>testCase<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>got<span class=\"token punctuation\">,</span> testCase<span class=\"token punctuation\">.</span>WantLoadValues<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key %v want got: %v, but got: %v\"</span><span class=\"token punctuation\">,</span> testCase<span class=\"token punctuation\">.</span>LoadKeys<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> testCase<span class=\"token punctuation\">.</span>WantLoadValues<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> got<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span>testCase<span class=\"token punctuation\">.</span>RangeFunc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"单元测试内容\"><a href=\"#单元测试内容\" class=\"headerlink\" title=\"单元测试内容\"></a>单元测试内容</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestCommonMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-intIntCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewCommonMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intIntCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-stringStringCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewCommonMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stringStringCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-structStructCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewCommonMap<span class=\"token punctuation\">[</span>testStruct<span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>structStructCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-intStructCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewCommonMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intStructCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSimpleMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-intIntCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewSimpleMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intIntCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-stringStringCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewSimpleMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stringStringCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-structStructCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewSimpleMap<span class=\"token punctuation\">[</span>testStruct<span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>structStructCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-intStructCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewSimpleMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intStructCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestRWMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-intIntCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewRWMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intIntCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-stringStringCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewRWMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stringStringCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-structStructCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewRWMap<span class=\"token punctuation\">[</span>testStruct<span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>structStructCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-intStructCase\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm <span class=\"token operator\">:=</span> NewRWMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">UnitTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intStructCase<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"单元测试用例\"><a href=\"#单元测试用例\" class=\"headerlink\" title=\"单元测试用例\"></a>单元测试用例</h3><details class=\"custom-details\">\n<summary>点击展开以显示代码</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tintIntCase TestCase<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TestCase<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\tIndexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tDeleteKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tLoadKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoaded<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoadValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tRangeFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: %d, value: %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEquals<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> b\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tstringStringCase TestCase<span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TestCase<span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\tIndexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1919810\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2147\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1919810\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"65535\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tDeleteKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2147\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2147\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2147\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tLoadKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2147\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1919810\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoaded<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoadValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1919810\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tRangeFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: %v, value: %v\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEquals<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> b\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tintStructCase TestCase<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TestCase<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\tIndexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tDeleteKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tLoadKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoaded<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoadValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tRangeFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b testStruct<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: %d, value: %#v\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEquals<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b testStruct<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>val\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tstructStructCase TestCase<span class=\"token punctuation\">[</span>testStruct<span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TestCase<span class=\"token punctuation\">[</span>testStruct<span class=\"token punctuation\">,</span> testStruct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n\t\tIndexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tStoreValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tDeleteKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tLoadKeys<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">2147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoaded<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWantLoadValues<span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>testStruct<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tRangeFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b testStruct<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: %#v, value: %#v\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEquals<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b testStruct<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>val\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h3 id=\"单元测试结果\"><a href=\"#单元测试结果\" class=\"headerlink\" title=\"单元测试结果\"></a>单元测试结果</h3><details class=\"custom-details\">\n<summary>点击展开以显示结果</summary>\n<p><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">=== RUN   TestCommonMap\n=== RUN   TestCommonMap/test-intIntCase\nkey: 1919810, value: 114514\nkey: 114514, value: 1919810\n=== RUN   TestCommonMap/test-stringStringCase\nkey: 114514, value: 1919810\nkey: 1919810, value: 114514\n=== RUN   TestCommonMap/test-structStructCase\nkey: toy_kv.testStruct{val:114514}, value: toy_kv.testStruct{val:1919810}\nkey: toy_kv.testStruct{val:1919810}, value: toy_kv.testStruct{val:114514}\n=== RUN   TestCommonMap/test-intStructCase\nkey: 114514, value: toy_kv.testStruct{val:1919810}\nkey: 1919810, value: toy_kv.testStruct{val:114514}\n--- PASS: TestCommonMap (0.00s)\n    --- PASS: TestCommonMap/test-intIntCase (0.00s)\n    --- PASS: TestCommonMap/test-stringStringCase (0.00s)\n    --- PASS: TestCommonMap/test-structStructCase (0.00s)\n    --- PASS: TestCommonMap/test-intStructCase (0.00s)\n=== RUN   TestSimpleMap\n=== RUN   TestSimpleMap/test-intIntCase\nkey: 1919810, value: 114514\nkey: 114514, value: 1919810\n=== RUN   TestSimpleMap/test-stringStringCase\nkey: 114514, value: 1919810\nkey: 1919810, value: 114514\n=== RUN   TestSimpleMap/test-structStructCase\nkey: toy_kv.testStruct{val:114514}, value: toy_kv.testStruct{val:1919810}\nkey: toy_kv.testStruct{val:1919810}, value: toy_kv.testStruct{val:114514}\n=== RUN   TestSimpleMap/test-intStructCase\nkey: 114514, value: toy_kv.testStruct{val:1919810}\nkey: 1919810, value: toy_kv.testStruct{val:114514}\n--- PASS: TestSimpleMap (0.00s)\n    --- PASS: TestSimpleMap/test-intIntCase (0.00s)\n    --- PASS: TestSimpleMap/test-stringStringCase (0.00s)\n    --- PASS: TestSimpleMap/test-structStructCase (0.00s)\n    --- PASS: TestSimpleMap/test-intStructCase (0.00s)\n=== RUN   TestRWMap\n=== RUN   TestRWMap/test-intIntCase\nkey: 1919810, value: 114514\nkey: 114514, value: 1919810\n=== RUN   TestRWMap/test-stringStringCase\nkey: 114514, value: 1919810\nkey: 1919810, value: 114514\n=== RUN   TestRWMap/test-structStructCase\nkey: toy_kv.testStruct{val:114514}, value: toy_kv.testStruct{val:1919810}\nkey: toy_kv.testStruct{val:1919810}, value: toy_kv.testStruct{val:114514}\n=== RUN   TestRWMap/test-intStructCase\nkey: 114514, value: toy_kv.testStruct{val:1919810}\nkey: 1919810, value: toy_kv.testStruct{val:114514}\n--- PASS: TestRWMap (0.00s)\n    --- PASS: TestRWMap/test-intIntCase (0.00s)\n    --- PASS: TestRWMap/test-stringStringCase (0.00s)\n    --- PASS: TestRWMap/test-structStructCase (0.00s)\n    --- PASS: TestRWMap/test-intStructCase (0.00s)\nPASS<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h2 id=\"基准测试\"><a href=\"#基准测试\" class=\"headerlink\" title=\"基准测试\"></a>基准测试</h2><h3 id=\"基准测试函数\"><a href=\"#基准测试函数\" class=\"headerlink\" title=\"基准测试函数\"></a>基准测试函数</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// MapBenchmarkTestFunc 各种IMap的基准测试函数体</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">MapBenchmarkTestFunc</span><span class=\"token punctuation\">(</span>m IMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> goroutines<span class=\"token punctuation\">,</span> operations <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\twg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>goroutines <span class=\"token operator\">*</span> operations<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> goroutines<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> operations<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">*</span>operations<span class=\"token operator\">+</span>k<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\t\t\t\t\tm<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">*</span>operations <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span>\n\t\t\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"基准测试内容\"><a href=\"#基准测试内容\" class=\"headerlink\" title=\"基准测试内容\"></a>基准测试内容</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// BenchmarkCommonMapTest 测试CommonMap进行100万次读和写的基准性能</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkCommonMapTest</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm <span class=\"token operator\">:=</span> NewCommonMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">MapBenchmarkTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// BenchmarkSimpleMapTest 测试SimpleMap进行100万次读和写的基准性能</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkSimpleMapTest</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm <span class=\"token operator\">:=</span> NewSimpleMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">MapBenchmarkTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// BenchmarkRWMapTest 测试RWMap进行100万次读和写的基准性能</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkRWMapTest</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm <span class=\"token operator\">:=</span> NewRWMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">10007</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">MapBenchmarkTestFunc</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"基准测试结果\"><a href=\"#基准测试结果\" class=\"headerlink\" title=\"基准测试结果\"></a>基准测试结果</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于我们使用了统一的测试函数，通过这个函数来进行调用，会产生额外的(常数级)性能开销，实际使用时的性能比本测试结果高</p></blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">测试次数</th>\n<th align=\"center\">测试名称</th>\n<th align=\"center\">基准性能</th>\n<th align=\"center\">估算</th>\n<th align=\"center\">测试结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">BenchmarkCommonMapTest</td>\n<td align=\"center\">493900208 ns/op</td>\n<td align=\"center\">百万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">BenchmarkSimpleMapTest</td>\n<td align=\"center\">317186708 ns/op</td>\n<td align=\"center\">百万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">BenchmarkRWMapTest</td>\n<td align=\"center\">87778174 ns/op</td>\n<td align=\"center\">千万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">BenchmarkCommonMapTest</td>\n<td align=\"center\">520827944 ns/op</td>\n<td align=\"center\">百万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">BenchmarkSimpleMapTest</td>\n<td align=\"center\">302985188 ns/op</td>\n<td align=\"center\">百万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">BenchmarkRWMapTest</td>\n<td align=\"center\">81960308 ns/op</td>\n<td align=\"center\">千万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">BenchmarkCommonMapTest</td>\n<td align=\"center\">575636938 ns/op</td>\n<td align=\"center\">百万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">BenchmarkSimpleMapTest</td>\n<td align=\"center\">301984916 ns/op</td>\n<td align=\"center\">百万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">BenchmarkRWMapTest</td>\n<td align=\"center\">82087205 ns/op</td>\n<td align=\"center\">千万级吞吐量</td>\n<td align=\"center\">PASS</td>\n</tr>\n</tbody></table>\n<h1 id=\"视频教程\"><a href=\"#视频教程\" class=\"headerlink\" title=\"视频教程\"></a>视频教程</h1><style>\n.bili-div {\n    position: relative;\n    overflow: hidden;\n    padding-top: 56.25%;\n}\n\n.bili-player {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 0;\n}\n</style>\n\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>视频地址: <a href=\"https://www.bilibili.com/video/BV1JG4y1e7NC\">[Go] 从零开始实现一个每秒千万级操作的Key-Value存储 - Introduction</a></p>\n<div class=\"bili-div\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=814446235&bvid=BV1JG4y1e7NC&cid=802201259&page=1&high_quality=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" class=\"bili-player\"> </iframe>\n</div>\n\n<h2 id=\"CommonMap\"><a href=\"#CommonMap\" class=\"headerlink\" title=\"CommonMap\"></a>CommonMap</h2><p>视频地址: <a href=\"https://www.bilibili.com/video/BV1BB4y167bY\">[Go] 从零开始实现一个每秒千万级操作的Key-Value存储 - CommonMap</a></p>\n<div class=\"bili-div\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=599434159&bvid=BV1BB4y167bY&cid=802206774&page=1&high_quality=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" class=\"bili-player\"> </iframe>\n</div>\n\n<h2 id=\"SimpleMap\"><a href=\"#SimpleMap\" class=\"headerlink\" title=\"SimpleMap\"></a>SimpleMap</h2><p>视频地址: <a href=\"https://www.bilibili.com/video/BV1bv4y1c7sg\">[Go] 从零开始实现一个每秒千万级操作的Key-Value存储 - SimpleMap</a></p>\n<div class=\"bili-div\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=556991433&bvid=BV1bv4y1c7sg&cid=802208042&page=1&high_quality=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" class=\"bili-player\"> </iframe>\n</div>\n\n<h2 id=\"RWMap\"><a href=\"#RWMap\" class=\"headerlink\" title=\"RWMap\"></a>RWMap</h2><p>视频地址: <a href=\"https://www.bilibili.com/video/BV18d4y1K7rf\">[Go] 从零开始实现一个每秒千万级操作的Key-Value存储 - RWMap</a></p>\n<div class=\"bili-div\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=344425686&bvid=BV18d4y1K7rf&cid=802208926&page=1&high_quality=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" class=\"bili-player\"> </iframe>\n</div>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a href=\"https://golangprojectstructure.com/hash-functions-go-code/\">Hash Functions in Go - James Smith</a></li>\n</ol>\n","text":" 上回说到，用Golang实现了一个高性能的kv，并且优化了锁的操作，今天我们就使用分段分表锁的思路，来将我们的Map性能提升到一个新的高度，相关视频教程在全文的最后，可以点击目录中的锚点快速前往 本blog的对应GitHub仓库为: sunist-c/toy-framework...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[{"name":"blog","slug":"blog","count":12,"path":"api/categories/blog.json"}],"tags":[{"name":"Golang","slug":"Golang","count":10,"path":"api/tags/Golang.json"},{"name":"Redis","slug":"Redis","count":3,"path":"api/tags/Redis.json"},{"name":"KeyValue","slug":"KeyValue","count":3,"path":"api/tags/KeyValue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E4%BA%A7%E7%94%9F\"><span class=\"toc-text\">问题产生</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">简单改进</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">进一步改进</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">更进一步改进</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hash%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">Hash函数设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E8%A1%A8%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">总表实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E8%A1%A8%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">分表实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">单元测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">单元测试函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">单元测试内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">单元测试用例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">单元测试结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">基准测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">基准测试函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">基准测试内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">基准测试结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B\"><span class=\"toc-text\">视频教程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Introduction\"><span class=\"toc-text\">Introduction</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CommonMap\"><span class=\"toc-text\">CommonMap</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SimpleMap\"><span class=\"toc-text\">SimpleMap</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RWMap\"><span class=\"toc-text\">RWMap</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲","slug":"blog-author","avatar":"/assets/img/favicon.png","link":"/","description":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲 is a pigeon from SouthWest University","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/assets/svg/bilibili.svg","link":"https://space.bilibili.com/25394898"},"live":{"icon":"/assets/svg/live.svg","link":"https://live.bilibili.com/5184681"},"github":{"icon":"/assets/svg/github.svg","link":"https://github.com/sunist-c"},"institution":{"icon":"/assets/svg/institution.svg","link":"https://github.com/swu-acm-lab"},"outlook":{"icon":"/assets/svg/outlook.svg","link":"mailto:sunist@mail.swu-acm.cn"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"(第二弹)使用Golang实现一个并发安全的Map","uid":"47859f6ed3b9b77bc9f9046f0cd4ce8c","slug":"KeyValueStore-GolangImplement-2","date":"2022-07-21T07:39:53.000Z","updated":"2022-07-21T07:51:35.585Z","comments":true,"path":"api/articles/KeyValueStore-GolangImplement-2.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.opss.cn%2Fwp-content%2Fuploads%2F2020%2F03%2F202003130037042.jpg&refer=http%3A%2F%2Fwww.opss.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660637907&t=d526a07a4c3db6183eb24202caa43381","text":" 上回说到，用Golang实现了一个高性能的kv，但是由于锁的关系，即使有多个go程并发对kv进行操作，但还是会因为全局的锁导致一go干活，多go看戏的场面，今天就来优化一下这个kv，让它实现真正的并发干活 思路总体设计思路还是没有变滴，我们还是要用上次那个模型进行总体设计，但是...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"blog","slug":"blog","count":12,"path":"api/categories/blog.json"}],"tags":[{"name":"Golang","slug":"Golang","count":10,"path":"api/tags/Golang.json"},{"name":"Redis","slug":"Redis","count":3,"path":"api/tags/Redis.json"},{"name":"KeyValue","slug":"KeyValue","count":3,"path":"api/tags/KeyValue.json"}],"author":{"name":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲","slug":"blog-author","avatar":"/assets/img/favicon.png","link":"/","description":"𝚂𝚞𝚗𝚒𝚜𝚝𝙲 is a pigeon from SouthWest University","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/assets/svg/bilibili.svg","link":"https://space.bilibili.com/25394898"},"live":{"icon":"/assets/svg/live.svg","link":"https://live.bilibili.com/5184681"},"github":{"icon":"/assets/svg/github.svg","link":"https://github.com/sunist-c"},"institution":{"icon":"/assets/svg/institution.svg","link":"https://github.com/swu-acm-lab"},"outlook":{"icon":"/assets/svg/outlook.svg","link":"mailto:sunist@mail.swu-acm.cn"}}}}}}